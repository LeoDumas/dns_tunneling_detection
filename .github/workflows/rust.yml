name: Rust Release Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Install Npcap via Chocolatey
      - name: Install Npcap
        run: choco install npcap --yes

      - name: Configure LIB path
        shell: pwsh
        run: |
          $libPath = "C:\Program Files\Npcap\Lib"
          # Append to the existing LIB environment variable
          Write-Host "LIB=$env:LIB;$libPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build Program
        run: cargo build --release --verbose

      - name: Run Tests
        run: cargo test --verbose

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dns_tunneling_detection
          path: |
            target\release\dns_tunneling_detection.exe

  release:
    needs: build
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dns_tunneling_detection
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset (.exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dns_tunneling_detection.exe
          asset_name: dns_tunneling_detection.exe
          asset_content_type: application/octet-stream
